df
Undernourishment_graph <- plot_geo(df, locationmode = 'ISO-3', color = ~ "Prevalence.of.undernourishment....of.population.", frame = ~Year) %>%
add_trace(locations = ~ Code,
z = ~ "Prevalence.of.undernourishment....of.population.",
color = ~ "Prevalence.of.undernourishment....of.population.",
colorscale = 'Electric')
Undernourishment_graph
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(dplyr)
library(htmlwidgets)
library(readr)
df <- read.csv("C:/Users/jwali/Downloads/prevalence-of-undernourishment.csv")
Undernourishment_graph <- plot_geo(df, locationmode = 'ISO-3', color = ~ "Prevalence of undernourishment (% of population)", frame = ~Year) %>%
add_trace(locations = ~ Code,
z = ~ "Prevalence of undernourishment (% of population)",
color = ~ "Prevalence of undernourishment (% of population)",
colorscale = 'Electric')
Undernourishment_graph
Undernourishment_graph <- plot_geo(df, locationmode = 'ISO-3', color = ~ "Prevalence of undernourishment (% of population)", frame = ~Year) %>%
add_trace(locations = ~ Code,
z = ~ "Prevalence of undernourishment (% of population)",
color = ~ "Prevalence of undernourishment (% of population)",
colorscale = 'Electric')  %>%
colorbar(title = "Prevalence of undernourishment (% of population)",
tickfont = list(size = 12)) %>%
Colors(colors = "YlGnBu", n=10)
Undernourishment_graph <- plot_geo(df, locationmode = 'ISO-3', color = ~ "Prevalence of undernourishment (% of population)", frame = ~Year) %>%
add_trace(locations = ~ Code,
z = ~ "Prevalence of undernourishment (% of population)",
color = ~ "Prevalence of undernourishment (% of population)",
colorscale = 'Electric')  %>%
colorbar(title = "Prevalence of undernourishment (% of population)",
tickfont = list(size = 12)) %>%
colors(colors = "YlGnBu", n=10)
Undernourishment_graph <- plot_geo(df, locationmode = 'ISO-3', color = ~ "Prevalence of undernourishment (% of population)", frame = ~Year) %>%
add_trace(locations = ~ Code,
z = ~ "Prevalence of undernourishment (% of population)",
color = ~ "Prevalence of undernourishment (% of population)",
colorscale = 'Electric')  %>%
colorbar(title = "Prevalence of undernourishment (% of population)",
tickfont = list(size = 12))
Undernourishment_graph
Undernourishment_graph <- plot_geo(df, locationmode = 'ISO-3', color = ~ "Prevalence of undernourishment (% of population)", frame = ~Year) %>%
add_trace(locations = ~ Code,
z = ~ "Prevalence of undernourishment (% of population)",
color = ~ "Prevalence of undernourishment (% of population)",
colorscale = 'Electric')  %>%
colorbar(title = "Prevalence of undernourishment (% of population)",
tickfont = list(size = 12)) %>%
colors(distinct = TRUE)
Undernourishment_graph <- plot_geo(df, locationmode = 'ISO-3', color = ~ "Prevalence of undernourishment (% of population)", frame = ~Year) %>%
add_trace(locations = ~ Code,
z = ~ "Prevalence of undernourishment (% of population)",
color = ~ "Prevalence of undernourishment (% of population)",
colorscale = 'Electric')  %>%
colorbar(title = "Prevalence of undernourishment (% of population)",
tickfont = list(size = 12)) %>%
colors(colors="Red")
Undernourishment_graph <- plot_geo(df, locationmode = 'ISO-3', color = ~ "Prevalence of undernourishment (% of population)", frame = ~Year) %>%
add_trace(locations = ~ Code,
z = ~ "Prevalence of undernourishment (% of population)",
color = ~ "Prevalence of undernourishment (% of population)",
colorscale = 'Electric')  %>%
colorbar(title = "Prevalence of undernourishment (% of population)",
tickfont = list(size = 12)) %>%
colours( colours = 'YlGnBu', n=10)
library(shiny)
library(plotly)
library(dplyr)
library(shiny)
library(plotly)
library(dplyr)
df_1 <- read.csv("C:/Users/jwali/Downloads/prevalence-of-undernourishment.csv")
colnames(df_1)[colnames(df_1) == 'Prevalence.of.undernourishment....of.population.'] <- ' undernourishment (% of population)'
df_1
ui <- fluidPage(
titlePanel("Time Series Choropleth"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "year", label = "Year", choices = unique(data$year), selected = "2001")
),
mainPanel(
plotlyOutput(outputId = "choropleth")
)
)
)
ui <- fluidPage(
titlePanel("Time Series Choropleth"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "year", label = "Year", choices = unique(df$year), selected = "2001")
),
mainPanel(
plotlyOutput(outputId = "choropleth")
)
)
)
server <- function(input, output) {
output$choropleth <- renderPlotly({
filtered_data <- data %>% filter(year == input$year)
plot_geo(df_1, locationmode = "ISO-3", color = ~`Population %`) %>%
add_trace(z = ~`Population %`) %>%
layout(title = paste0("Population % by Country in ", input$year),
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
projection = list(type = "Mercator")
)
)
})
}
shinyApp(ui, server)
df_1 <- read.csv("C:/Users/jwali/Downloads/prevalence-of-undernourishment.csv")
colnames(df_1)[colnames(df_1) == 'Prevalence.of.undernourishment....of.population.'] <- ' undernourishment (% of population)'
ui <- fluidPage(
titlePanel("Time Series Choropleth"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "year", label = "Year", choices = unique(df_1$year), selected = "2001")
),
mainPanel(
plotlyOutput(outputId = "choropleth")
)
)
)
server <- function(input, output) {
df_1 <- df_1 %>% filter(year == input$year)
plot_geo(df_1, locationmode = "ISO-3", color = ~`undernourishment (% of population)`) %>%
add_trace(z = ~`undernourishment (% of population)) %>%
layout(title = paste0("Population % by Country in ", input$year),
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
projection = list(type = "Mercator")
)
)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
library(plotly)
library(dplyr)
df_1 <- read.csv("C:/Users/jwali/Downloads/prevalence-of-undernourishment.csv")
colnames(df_1)[colnames(df_1) == 'Prevalence.of.undernourishment....of.population.'] <- ' undernourishment (% of population)'
ui <- fluidPage(
titlePanel("Time Series Choropleth"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "year", label = "Year", choices = unique(df_1$year), selected = "2001")
),
mainPanel(
plotlyOutput(outputId = "choropleth")
)
)
)
server <- function(input, output) {
df_1 <- df_1 %>% filter(year == input$year)
plot_geo(df_1, locationmode = "ISO-3", color = ~`undernourishment (% of population)`) %>%
server <- function(input, output) {
df_1 <- df_1 %>% filter(year == input$Year)
plot_geo(df_1, locationmode = "ISO-3", color = ~`undernourishment (% of population)`) %>%
add_trace(z = ~`undernourishment (% of population)) %>%
layout(title = paste0("Population % by Country in ", input$year),
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
projection = list(type = "Mercator")
)
)
})
}
shinyApp(ui, server)
shinyApp(ui, server)
runApp(ui, server)
df_1 <- read.csv("C:/Users/jwali/Downloads/prevalence-of-undernourishment.csv")
colnames(df_1)[colnames(df_1) == 'Prevalence.of.undernourishment....of.population.'] <- ' undernourishment (% of population)'
df_1
library(shiny)
library(plotly)
library(dplyr)
df_1 <- read.csv("C:/Users/jwali/Downloads/prevalence-of-undernourishment.csv")
colnames(df_1)[colnames(df_1) == 'Prevalence.of.undernourishment....of.population.'] <- ' undernourishment (% of population)'
df_1
df_1
df_app <- read.csv("C:/Users/jwali/Downloads/prevalence-of-undernourishment.csv")
df_app
---
title: "Untitled"
output: html_document
date: "2023-03-13"
---
library(shiny)
library(plotly)
library(dplyr)
df_app <- read.csv("C:/Users/jwali/Downloads/prevalence-of-undernourishment.csv")
df_app
colnames(df_1)[colnames(df_1) == 'Prevalence.of.undernourishment....of.population.'] <- ' undernourishment (% of population)'
df_1
ui <- fluidPage(
titlePanel("Time Series Choropleth"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "year", label = "Year", choices = unique(df_1$year), selected = "2001")
),
mainPanel(
plotlyOutput(outputId = "choropleth")
)
)
)
server <- function(input, output) {
output$choropleth <- renderPlotly({
df_1 <- df_1 %>% filter(year == input$Year)
plot_geo(df_1, locationmode = "ISO-3", color = ~`undernourishment (% of population)`) %>%
runApp(ui, server)
library(plotly)
install.packages("htmlwidgets") #To create a html of the plotly charts
library(htmlwidgets)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
#install.packages("htmlwidgets") #To create a html of the plotly charts
library(htmlwidgets)
library(dplyr)
# create a scatter plot with mpg on the x-axis and hp on the y-axis
p <- plot_ly(mtcars, x = ~mpg, y = ~hp, type = "scatter", mode = "markers", marker = list(color = "red"))
# add a title and axis labels
p <- layout(p, title = "MPG vs. HP", xaxis = list(title = "Miles per gallon"), yaxis = list(title = "Horsepower"))
# display the chart
p
help(signup, package = 'plotly')
help(signup, package = 'plotly')
Sys.setenv("plotly_username" = "AshishMhatre")
Sys.setenv("plotly_api_key" = "f557RfDUqXP0hRgRjUdb")
chart_url <- api_create(p, filename = "my_chart", sharing = "public", fileopt = "overwrite")
# create a scatter plot with mpg on the x-axis and hp on the y-axis
mpg
# create a scatter plot with mpg on the x-axis and hp on the y-axis
mtcars
p <- plot_ly(mtcars, x = ~mpg, y = ~hp, type = "scatter", mode = "markers", marker = list(color = "red"))
# add a title and axis labels
p <- layout(p, title = "MPG vs. HP", xaxis = list(title = "Miles per gallon"), yaxis = list(title = "Horsepower"))
# display the chart
p
mtcars %>%
group_by(cyl) %>%
summarise(avg_mpg = mean(mpg)) %>%
plot_ly(x = ~cyl, y = ~avg_mpg, type = "bar", marker = list(color = "red"))
# create a copy of mtcars dataset and convert rownames to a new column
mtcars_candle <- mtcars
mtcars_candle$CarName <- rownames(mtcars_candle)
rownames(mtcars_candle) <- NULL
# create the candlestick chart
p <- plot_ly(mtcars_candle, x = ~CarName, open = ~mpg, high = ~hp, low = ~disp, close = ~wt, type = "candlestick")
# set chart title and axis labels
p <- layout(p, title = "Candlestick Chart for mtcars", xaxis = list(title = "Car Name"), yaxis = list(title = "Values"))
# display the chart
p
lit <- read.csv('"C:\Users\jwali\Downloads\R Shiny.csv')
lit <- read.csv('C:\Users\jwali\Downloads\R Shiny.csv')
lit <- read.csv('C:/Users/jwali/Downloads/R Shiny.csv')
setwd("C:/Users/jwali/Downloads")
lit <- read.csv('C:/Users/jwali/Downloads/R Shiny.csv')
lit <- read.csv("C:\Users\jwali\Downloads\R Shiny.csv")
setwd("C:/Users/jwali/Downloads")
lit <- read.csv('R Shiny.csv')
getwd()
lit <- read.csv('R Shiny.csv')
lit <- read.csv("C:/Users/jwali/Downloads/R Shiny.csv")
lit <- read.csv("C:/Users/jwali/Downloads/R Shiny.csv")
setwd("C:/Users/jwali/Downloads")
lit <- read.csv("C:/Users/jwali/Downloads/R Shiny.csv")
# load the shiny package
library(shiny)
## 1: Define UI for application
shinyUI(
## 2: Creating a page using fluidpage()
fluidPage(
## 3: Creating title panel using titlepanel()
titlePanel( h1('Childhood Malnutrition and it's Psychological Measures, align = "center")),
## 1: Define UI for application
shinyUI(
## 2: Creating a page using fluidpage()
fluidPage(
## 3: Creating title panel using titlepanel()
titlePanel( h1('Childhood Malnutrition and its Psychological Measures', align = "center")),
## 5: Creating Input fields -- TypeofInput(InputID, InputLabel, Choices, DefaultChoice)
selectInput("var1", label = "1. Select the Variables to compare",
choices = c("Underweight" = 2, "Wasting" = 3, "Stunting" = 4),
selected = 2),
selectInput("var2", label = "1. Select the Variables to compare",
choices = c("Underweight" = 2, "Wasting" = 3, "Stunting" = 4),
selected = 3),
checkboxGroupInput("checkbox",
label = "2. Select any of the following",
choices = lit$Country,
selected = 'India'),
),
## 6: Creating Main panel -- TypeofOutput(OutputID)
## Output elements will appear by the order they are called in Main panel.
mainPanel(
textOutput("text1"),
tags$head(tags$style("#text1{color: blue;font-size: 20px;font-style: bold;}")),
textOutput("text2"),
tags$head(tags$style("#text2{color: blue;font-size: 20px;font-style: bold;}")),
textOutput("text3"),
tags$head(tags$style("#text3{color: blue;font-size: 20px;font-style: bold;}")),
plotOutput("scatter"),
tableOutput("my_table"),
plotOutput("bar")),
tableOutput("mytable")
)
## 1: Define UI for application
shinyUI(
## 2: Creating a page using fluidpage()
fluidPage(
## 3: Creating title panel using titlepanel()
titlePanel( h1('Childhood Malnutrition and its Psychological Measures', align = "center")),
## 5: Creating Input fields -- TypeofInput(InputID, InputLabel, Choices, DefaultChoice)
selectInput("var1", label = "1. Select the Variables to compare",
choices = c("Underweight" = 2, "Wasting" = 3, "Stunting" = 4),
selected = 2),
selectInput("var2", label = "1. Select the Variables to compare",
choices = c("Underweight" = 2, "Wasting" = 3, "Stunting" = 4),
selected = 3),
checkboxGroupInput("checkbox",
label = "2. Select any of the following",
choices = lit$Country,
selected = 'India'),
),
## 6: Creating Main panel -- TypeofOutput(OutputID)
## Output elements will appear by the order they are called in Main panel.
mainPanel(
textOutput("text1"),
tags$head(tags$style("#text1{color: blue;font-size: 20px;font-style: bold;}")),
textOutput("text2"),
tags$head(tags$style("#text2{color: blue;font-size: 20px;font-style: bold;}")),
plotOutput("scatter"),
tableOutput("my_table"),
plotOutput("bar")),
tableOutput("mytable")
)
## 1: Define Server for application
shinyServer(
## 2: Create R code that builds the object in the server function.
## The server function builds a list-like object named "output" that contains all of the code
## Each R object needs to have its own entry in the list.
function(input, output) {
## Use Reactive() to evaluate expressions eg. Reading/Processing/Wrangling Data
ipfile <- reactive({
read.csv('R Shiny.csv')
})
colm1 <- reactive({
as.numeric(input$var1)
})
colm2 <- reactive({
as.numeric(input$var2)
})
colr <- reactive({
as.numeric(input$colour)
})
lit <- read.csv("C:/Users/jwali/Downloads/R Shiny.csv")
databar <- reactive({
data <- lit %>% filter(lit$Country %in% input$checkbox)})
## Use rendertext() to show text
output$text1 <- renderText({
paste("Selected columns for analysis are -", names(lit[colm1()]), 'and ', names(lit[colm2()]))
})
output$text2 <- renderText({
paste("Color legend is ", names(lit[colr()]))
})
## Use renderTable() to show Dataframe
output$my_table <- renderTable({
databar() })
output$mytable <- renderTable({
head(ipfile()) })
## Use renderPlot() to plot the chart
output$scatter <- renderPlot({
lit %>%
ggplot(aes(x=.[[colm1()]], y=.[[colm2()]])) +
geom_point(size=6, aes(colour=Country)) +
labs(title = 'Bivariate Analysis', x=colnames(lit)[colm1()], y=colnames(lit)[colm2()], color =  colnames(lit)[colr()])+
theme(title = element_text(size = 16, face = 'bold', colour = 'red'))
})
output$bar <- renderPlot({
#using ggplot
ggplot(databar(), aes(x=input$checkbox, y=TotalMalnutrition)) +
geom_bar(stat = "identity") + coord_flip() +
labs(title = 'Comparison of Total Malnutrition by country', y='Total Malnutrition', x='Country')+
theme(title = element_text(size = 16, face = 'bold', colour = 'blue'))
})
})
### Install the shiny package if not already installed
### install.packages("shiny")
# load the shiny package
library(shiny)
## 1: Define UI for application
shinyUI(
## 2: Creating a page using fluidpage()
fluidPage(
## 3: Creating title panel using titlepanel()
titlePanel( h1('Childhood Malnutrition and its Psychological Measures', align = "center")),
## 5: Creating Input fields -- TypeofInput(InputID, InputLabel, Choices, DefaultChoice)
selectInput("var1", label = "1. Select the Variables to compare",
choices = c("Underweight" = 2, "Wasting" = 3, "Stunting" = 4),
selected = 2),
selectInput("var2", label = "1. Select the Variables to compare",
choices = c("Underweight" = 2, "Wasting" = 3, "Stunting" = 4),
selected = 3),
checkboxGroupInput("checkbox",
label = "2. Select any of the following",
choices = lit$Country,
selected = 'India'),
),
## 6: Creating Main panel -- TypeofOutput(OutputID)
## Output elements will appear by the order they are called in Main panel.
mainPanel(
textOutput("text1"),
tags$head(tags$style("#text1{color: blue;font-size: 20px;font-style: bold;}")),
textOutput("text2"),
tags$head(tags$style("#text2{color: blue;font-size: 20px;font-style: bold;}")),
plotOutput("scatter"),
tableOutput("my_table"),
plotOutput("bar")),
tableOutput("mytable")
)
## Use renderPlot() to plot the chart
output$scatter <- renderPlot({
lit %>%
ggplot(aes(x=.[[colm1()]], y=.[[colm2()]])) +
geom_point(size=6, aes(colour=Country)) +
labs(title = 'Bivariate Analysis', x=colnames(lit)[colm1()], y=colnames(lit)[colm2()], color =  colnames(lit)[colr()])+
theme(title = element_text(size = 16, face = 'bold', colour = 'red'))
})
data <- lit %>% filter(lit$Country %in% input$checkbox)})
lit <- read.csv("C:/Users/jwali/Downloads/R Shiny.csv")
read.csv('R Shiny.csv')
#using ggplot
ggplot(databar(), aes(x=input$checkbox, y=TotalMalnutrition)) +
geom_bar(stat = "identity") + coord_flip() +
labs(title = 'Comparison of Total Malnutrition by country', y='Total Malnutrition', x='Country')+
theme(title = element_text(size = 16, face = 'bold', colour = 'blue'))
library(shiny)
library(shiny)
library(ggplot2)
library(magrittr)
library(dplyr)
databar <- reactive({
data <- lit %>% filter(lit$Country %in% input$checkbox)})
data <- lit %>% filter(lit$Country %in% input$checkbox)})
databar <- reactive({
data <- lit %>% filter(lit$Country %in% input$checkbox)})
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
### Install the shiny package if not already installed
### install.packages("shiny")
# load the shiny package
library(shiny)
## 1: Define UI for application
shinyUI(
## 2: Creating a page using fluidpage()
fluidPage(
## 3: Creating title panel using titlepanel()
titlePanel( h1('Childhood Malnutrition and its Psychological Measures', align = "center")),
## 5: Creating Input fields -- TypeofInput(InputID, InputLabel, Choices, DefaultChoice)
selectInput("var1", label = "1. Select the Variables to compare",
choices = c("Underweight" = 2, "Wasting" = 3, "Stunting" = 4),
selected = 2),
selectInput("var2", label = "1. Select the Variables to compare",
choices = c("Underweight" = 2, "Wasting" = 3, "Stunting" = 4),
selected = 3),
checkboxGroupInput("checkbox",
label = "2. Select any of the following",
choices = lit$Country,
selected = 'India'),
),
## 6: Creating Main panel -- TypeofOutput(OutputID)
## Output elements will appear by the order they are called in Main panel.
mainPanel(
textOutput("text1"),
tags$head(tags$style("#text1{color: blue;font-size: 20px;font-style: bold;}")),
textOutput("text2"),
tags$head(tags$style("#text2{color: blue;font-size: 20px;font-style: bold;}")),
plotOutput("scatter"),
tableOutput("my_table"),
plotOutput("bar")),
tableOutput("mytable")
)
runApp('C:/Users/jwali/OneDrive/Desktop/RShinyApp')
runApp('C:/Users/jwali/OneDrive/Desktop/RShinyApp')
read.csv('R Shiny.csv')
## Use Reactive() to evaluate expressions eg. Reading/Processing/Wrangling Data
ipfile <- reactive({
read.csv('R Shiny.csv')
})
runApp('C:/Users/jwali/OneDrive/Desktop/RShinyApp')
lit <- read.csv("C:/Users/jwali/OneDrive/Desktop/RShinyApp/R Shiny.csv")
read.csv('R Shiny.csv')
setwd("C:/Users/jwali/OneDrive/Desktop/RShinyApp")
read.csv('R Shiny.csv')
runApp()
lit <- read.csv("R Shiny.csv")
read.csv('R Shiny.csv')
runApp()
